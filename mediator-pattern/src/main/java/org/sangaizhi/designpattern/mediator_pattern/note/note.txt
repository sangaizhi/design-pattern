一、中介者模式:
    用一个中间对象封装一系列的对象交互，中介者使各对象不需要显示的相互作用，从而是耦合松散，而且可以独立的改变它们之间的交互。

    角色分类：
        抽象中介者角色：定义统一的接口，用于各同事角色之间的通信，本实例中的 AbstractMediator
        具体中介者角色：协调各同事角色实现协作行为，因此它必须依赖于各同事角色。
        同事角色：每一个同事角色都知道中介者角色（这样才能让中介者帮忙做事），而且与其他的同事角色通信的时候，一定要通过
            中介者角色协作，每一个同事角色类的行为分为两种：一种是同事本身的行为，比如改变本身的状态，处理自己的行为等，这种
            行为叫做自发行为，与其他的同事类或中介者没有任何的依赖；第二种是必须依赖中介者才能完成的行为，叫做依赖方法。

二、优缺点
    优点：
        减少了类之间的依赖，把原有的一对多的依赖变成了一对一的依赖，同事类只依赖于中介者，降低了类之间的耦合。
    缺点：
        中介者会比较膨胀，而且逻辑复杂，原本 N 个对象直接的相互的依赖关系转换为中介者和同事类之间的依赖关系，同事类越多，
        中介者的逻辑就越复杂。

四、使用场景：
    调度中心
    MVC 框架，其中 C 就是中介者，协调 M 和 V 的工作。

五、注意事项：
    就如缺点中所提到的一样，中介者会膨胀。
    所以在如下情况下尝试使用中介模式
        N 个对象之间产生了相互依赖关系（N > 2）
        多个对象有依赖，但是依赖的行为尚不确定或者有发生改变的可能，在这种情况下一般建议采用中介者模式，降低变更引起的风险扩散。
