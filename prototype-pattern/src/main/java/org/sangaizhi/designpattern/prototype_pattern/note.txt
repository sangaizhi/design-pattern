一、原型模式
    用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象
    通用类图：原型模式通用类图.jpg

二、优缺点：
    优点：
        性能优良：原型模式是内存二进制流的拷贝，要比直接 new 一个对象性能好得多，特别是要在一个循环内产生大量的对象时，原型模式可以更好的体现其优点。
        逃避构造函数的约束：这是优点也是缺点，直接在内存中拷贝，构造函数是不会被执行的。

三、使用场景：
    资源优化场景：类初始化需要消耗非常多的资源。
    性能和安全要求的场景：通过 new 产生一个对象需要非常多的数据准备和访问权限，则可以使用原型模式。
    一个对象多个修改者的场景，

    在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过clone的方发创建一个对象，然后由工厂方法提供给调用者。
四、注意事项：
    原型模式虽然简单，但是在Java中使用原型模式也就是 clone 方法还是有些注意事项的：
        构造函数不会被执行
        浅拷贝和深拷贝
            Object 提供的 clone 方法只是拷贝对象，对对象内部的引用对象、数组等都不拷贝，还是执行原生对象的内部元素地址，只有int long  char 等基本类型会被拷贝。
            String 类型是一个特殊的类型， Java希望你把它认为是基本类型，它是没有 clone 方法的，处理机制也比较特殊，通过字符串池在需要的时候才在内存中创建新的字符串。
        clone 和 final
            对象的 clone 和对象内部的 final 关键字是有冲突的