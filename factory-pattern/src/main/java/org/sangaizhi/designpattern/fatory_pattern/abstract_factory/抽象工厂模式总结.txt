一、抽象工厂模式：
    为创建一组相关或相互依赖的对象提供一个接口，而且无须执行它们的具体类

二、抽象工厂模式的理解：
    有 M 个产品等级就应该有 M 个实现工厂类：在每个实现工厂中，实现不同产品族的生产任务。
    用本实例的解释就是：
        有三个产品族：分别是：有飞行能力的产品，有发出声音能力的产品，有写能力的产品
        每一个产品族都有2（对应M）个产品等级，
        所以此实例有一个抽象工厂 Factory ,两个实例工厂 FactoryA 和 FactoryB，
        两个实例工厂都可以创建三个产品族的对应产品等级的产品

    总结：有 N 产品族，在抽象工厂类中就应该有 N 个创建方法
          有 M 产品等级，就应该有 M 个实例工厂类

三、抽象工厂模式的优点和缺点
    优点：
        封装性：每一个产品的创建不是高层模块（抽象工厂）需要关心的，高层模块主要关心接口，至于产品的创建有工厂类负责
            所以创建一个产品只需要知道创建产品的工厂。
    缺点：
        产品族扩展非常困难，如果扩展一个产品C,也就是产品家族有 N 个变成 N+1 个，那个抽象工厂的方法需要增加一个创建 C 产品的
    方法，然后所有的实例工厂也需要增加创建 C 产品的方法。这严重违反了开闭原则。

四、抽象工厂方法的使用场景：
    一个对象族（或是一组没有任何关系的对象）都有相同的约束，则可以使用抽象工厂模式。

五、注意事项：
    抽象工厂的模式的缺点是产品族扩展困难，不是产品等级扩展困难。也就是说横向扩展容易，纵向扩展困难。